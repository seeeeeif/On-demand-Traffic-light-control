
traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000062e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001582  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000902  00000000  00000000  00001d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dbb  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  0000344c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058c  00000000  00000000  000036d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000646  00000000  00000000  00003c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000042a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 96 01 	call	0x32c	; 0x32c <main>
  74:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_inits>:
#include "app.h"


void app_inits(void) 
{
    traffic_init();
  7c:	0e 94 77 00 	call	0xee	; 0xee <traffic_init>
  80:	08 95       	ret

00000082 <app_start>:
}

void app_start(void)
{
    traffic_nornal();
  82:	0e 94 94 00 	call	0x128	; 0x128 <traffic_nornal>
  86:	08 95       	ret

00000088 <__vector_1>:
}



ISR (INT0_vect)
{
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	2f 93       	push	r18
  94:	3f 93       	push	r19
  96:	4f 93       	push	r20
  98:	5f 93       	push	r21
  9a:	6f 93       	push	r22
  9c:	7f 93       	push	r23
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
	traffic_ped();
  aa:	0e 94 1d 01 	call	0x23a	; 0x23a <traffic_ped>

}
  ae:	ff 91       	pop	r31
  b0:	ef 91       	pop	r30
  b2:	bf 91       	pop	r27
  b4:	af 91       	pop	r26
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	7f 91       	pop	r23
  bc:	6f 91       	pop	r22
  be:	5f 91       	pop	r21
  c0:	4f 91       	pop	r20
  c2:	3f 91       	pop	r19
  c4:	2f 91       	pop	r18
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <ledInit>:

#include "led.h"

void ledInit(uint8 portNumber  ,uint8 pinNumber ){

	DIO_init( portNumber,  pinNumber, 1);
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_init>
  d6:	08 95       	ret

000000d8 <ledOn>:
}

void ledOn(uint8  portNumber ,uint8 pinNumber){

	DIO_write(portNumber,pinNumber, 1);       //Set the given pin in the given port to one(on)
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	0e 94 08 02 	call	0x410	; 0x410 <DIO_write>
  de:	08 95       	ret

000000e0 <ledOff>:
}

void ledOff(uint8  portNumber  ,uint8 pinNumber){

	DIO_write( portNumber,  pinNumber ,0);      //Set the given pin in the given port to zero(off)
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	0e 94 08 02 	call	0x410	; 0x410 <DIO_write>
  e6:	08 95       	ret

000000e8 <ledToggle>:
}

void ledToggle (uint8 portNumber  , uint8 pinNumber)
{
	DIO_toggle(portNumber,pinNumber);
  e8:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_toggle>
  ec:	08 95       	ret

000000ee <traffic_init>:
uint8 counter =0;
 void traffic_init(void)
 {
	 	// Initializing Direction and Value of LED DIO PINS
	 	//car_LEDS
	 	ledInit(PORT_A,PIN_0); //green
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 68 00 	call	0xd0	; 0xd0 <ledInit>
	 	ledInit(PORT_A,PIN_1); //Yellow
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 68 00 	call	0xd0	; 0xd0 <ledInit>
	 	ledInit(PORT_A,PIN_2); //red
  fe:	62 e0       	ldi	r22, 0x02	; 2
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 68 00 	call	0xd0	; 0xd0 <ledInit>

	 	//pedestrian_LEDS
	 	ledInit(PORT_B,PIN_0); //green
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 68 00 	call	0xd0	; 0xd0 <ledInit>
	 	ledInit(PORT_B,PIN_1); //Yellow
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 68 00 	call	0xd0	; 0xd0 <ledInit>
	 	ledInit(PORT_B,PIN_2); //red
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 68 00 	call	0xd0	; 0xd0 <ledInit>
	 	// initializing Interrupt Button Pin
	 	//PushButtonInit(PORTD_ID,PIN2_ID); //INT0


	 	//Initializing INTERRUPT 0
	 	Exi0Init();
 11e:	0e 94 a9 02 	call	0x552	; 0x552 <Exi0Init>
	 	//Enable INTERRUPT 0
	 	Exi0Enable();
 122:	0e 94 b8 02 	call	0x570	; 0x570 <Exi0Enable>
 126:	08 95       	ret

00000128 <traffic_nornal>:
 }
 void traffic_nornal(void)
 {
 128:	cf 93       	push	r28
	 Blinking_yellow();

	 ledOff(PORT_A,PIN_1);
	 ledOff(PORT_B,PIN_1);
*/
red_flag=1;
 12a:	c1 e0       	ldi	r28, 0x01	; 1
 12c:	c0 93 63 00 	sts	0x0063, r28	; 0x800063 <red_flag>
// LED RED CAR ON
ledOn(PORT_A,PIN_0);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 6c 00 	call	0xd8	; 0xd8 <ledOn>
// LED RED PEPOLE OFF
ledOff(PORT_B,PIN_0);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
// LED GREEN PEPOLE ON
ledOn(PORT_B,PIN_2);
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 6c 00 	call	0xd8	; 0xd8 <ledOn>

// DELAY 5 sec
Timer0_Delay(20);
 148:	64 e1       	ldi	r22, 0x14	; 20
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 bc 02 	call	0x578	; 0x578 <Timer0_Delay>
// LED RED CAR OFF
ledOff(PORT_A,PIN_0);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
// LED GREEN PEPOLE OFF
ledOff(PORT_B,PIN_2);
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
red_flag=0;
 164:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <red_flag>

yellow_flag=1;
 168:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <yellow_flag>
for(counter=0;counter<10;counter++)
 16c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 170:	13 c0       	rjmp	.+38     	; 0x198 <traffic_nornal+0x70>
{
	ledToggle(PORT_A,PIN_1);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 74 00 	call	0xe8	; 0xe8 <ledToggle>
	ledToggle(PORT_B,PIN_1);
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 74 00 	call	0xe8	; 0xe8 <ledToggle>
	Timer0_Delay(2);
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 bc 02 	call	0x578	; 0x578 <Timer0_Delay>
// LED GREEN PEPOLE OFF
ledOff(PORT_B,PIN_2);
red_flag=0;

yellow_flag=1;
for(counter=0;counter<10;counter++)
 18e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 198:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19c:	8a 30       	cpi	r24, 0x0A	; 10
 19e:	48 f3       	brcs	.-46     	; 0x172 <traffic_nornal+0x4a>
{
	ledToggle(PORT_A,PIN_1);
	ledToggle(PORT_B,PIN_1);
	Timer0_Delay(2);
}
ledOff(PORT_A,PIN_1);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
ledOff(PORT_B,PIN_1);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
yellow_flag=0;
 1b0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <yellow_flag>

green_flag=1;
 1b4:	c1 e0       	ldi	r28, 0x01	; 1
 1b6:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <green_flag>
ledOn(PORT_A,PIN_2);
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 6c 00 	call	0xd8	; 0xd8 <ledOn>
ledOn(PORT_B,PIN_0);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 6c 00 	call	0xd8	; 0xd8 <ledOn>
// DELAY 5 sec
Timer0_Delay(20);
 1ca:	64 e1       	ldi	r22, 0x14	; 20
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 bc 02 	call	0x578	; 0x578 <Timer0_Delay>
ledOff(PORT_A,PIN_2);
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
ledOff(PORT_B,PIN_0);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
green_flag=0;
 1e6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <green_flag>

yellow_flag=1;
 1ea:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <yellow_flag>
for(counter=0;counter<10;counter++)
 1ee:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f2:	13 c0       	rjmp	.+38     	; 0x21a <traffic_nornal+0xf2>
{
	ledToggle(PORT_A,PIN_1);
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 74 00 	call	0xe8	; 0xe8 <ledToggle>
	ledToggle(PORT_B,PIN_1);
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 74 00 	call	0xe8	; 0xe8 <ledToggle>
	Timer0_Delay(2);
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 bc 02 	call	0x578	; 0x578 <Timer0_Delay>
ledOff(PORT_A,PIN_2);
ledOff(PORT_B,PIN_0);
green_flag=0;

yellow_flag=1;
for(counter=0;counter<10;counter++)
 210:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 21a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21e:	8a 30       	cpi	r24, 0x0A	; 10
 220:	48 f3       	brcs	.-46     	; 0x1f4 <traffic_nornal+0xcc>
{
	ledToggle(PORT_A,PIN_1);
	ledToggle(PORT_B,PIN_1);
	Timer0_Delay(2);
}
ledOff(PORT_A,PIN_1);
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
ledOff(PORT_B,PIN_1);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
yellow_flag=0;
 232:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <yellow_flag>


 } 
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <traffic_ped>:
		  Timer0_Delay(20);
		  ledOff(PORT_A,PIN_0);  // GREEN LED FOR CARS
		  ledOff(PORT_B,PIN_2);  // RED LED FOR PEDESTRIANS
		  ledOff(PORT_B,PIN_0);  // GREEN LED FOR PEDESTRIANS
		 */ 
		if(red_flag==1)
 23a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <red_flag>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	d9 f4       	brne	.+54     	; 0x278 <traffic_ped+0x3e>
		{
			// LED RED CAR ON
			ledOn(PORT_A,PIN_0);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 6c 00 	call	0xd8	; 0xd8 <ledOn>
			// LED RED PEPOLE OFF
			ledOff(PORT_B,PIN_0);
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
			// LED GREEN PEPOLE ON
			ledOn(PORT_B,PIN_2);
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 6c 00 	call	0xd8	; 0xd8 <ledOn>
			
			// DELAY 5 sec
			Timer0_Delay(20);
 25a:	64 e1       	ldi	r22, 0x14	; 20
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 bc 02 	call	0x578	; 0x578 <Timer0_Delay>
			// LED RED CAR OFF
			ledOff(PORT_A,PIN_0);
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
			// LED GREEN PEPOLE OFF
			ledOff(PORT_B,PIN_2);
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
 276:	08 95       	ret
		}
		else if(yellow_flag==1 ||green_flag==1)
 278:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <yellow_flag>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	29 f0       	breq	.+10     	; 0x28a <traffic_ped+0x50>
 280:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <green_flag>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	09 f0       	breq	.+2      	; 0x28a <traffic_ped+0x50>
 288:	50 c0       	rjmp	.+160    	; 0x32a <traffic_ped+0xf0>
		{
			// yellow car and people
			ledOff(PORT_A,PIN_1);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
			ledOff(PORT_B,PIN_1);
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
			
			ledOff(PORT_A,PIN_2);
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
			ledOff(PORT_B,PIN_0);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
			
			ledOn(PORT_A,PIN_1);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 6c 00 	call	0xd8	; 0xd8 <ledOn>
			for(counter=0;counter<10;counter++)
 2b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b6:	13 c0       	rjmp	.+38     	; 0x2de <traffic_ped+0xa4>
			{
				ledToggle(PORT_A,PIN_1);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 74 00 	call	0xe8	; 0xe8 <ledToggle>
				ledToggle(PORT_B,PIN_1);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 74 00 	call	0xe8	; 0xe8 <ledToggle>
				Timer0_Delay(2);
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 bc 02 	call	0x578	; 0x578 <Timer0_Delay>
			
			ledOff(PORT_A,PIN_2);
			ledOff(PORT_B,PIN_0);
			
			ledOn(PORT_A,PIN_1);
			for(counter=0;counter<10;counter++)
 2d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e2:	8a 30       	cpi	r24, 0x0A	; 10
 2e4:	48 f3       	brcs	.-46     	; 0x2b8 <traffic_ped+0x7e>
				ledToggle(PORT_A,PIN_1);
				ledToggle(PORT_B,PIN_1);
				Timer0_Delay(2);
			}
			
			ledOff(PORT_A,PIN_1);
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
			ledOff(PORT_B,PIN_1);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
			
			// LED RED CAR ON
			ledOn(PORT_A,PIN_0);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 6c 00 	call	0xd8	; 0xd8 <ledOn>
			// LED RED PEPOLE OFF
			ledOff(PORT_B,PIN_0);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
			// LED GREEN PEPOLE ON
			ledOn(PORT_B,PIN_2);
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 6c 00 	call	0xd8	; 0xd8 <ledOn>
			
			// DELAY 5 sec
			Timer0_Delay(20);
 30e:	64 e1       	ldi	r22, 0x14	; 20
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 bc 02 	call	0x578	; 0x578 <Timer0_Delay>
			// LED RED CAR OFF
			ledOff(PORT_A,PIN_0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
			// LED GREEN PEPOLE OFF
			ledOff(PORT_B,PIN_2);
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 70 00 	call	0xe0	; 0xe0 <ledOff>
 32a:	08 95       	ret

0000032c <main>:
#include "MCAL/INT/Test_INT.h"
#include "ECUAL/push button/test_button.h"

int main(void){

	app_inits();
 32c:	0e 94 3e 00 	call	0x7c	; 0x7c <app_inits>

	 while(1)
	 {
	 	app_start();
 330:	0e 94 41 00 	call	0x82	; 0x82 <app_start>
 334:	fd cf       	rjmp	.-6      	; 0x330 <main+0x4>

00000336 <DIO_init>:
			value = PIND;
			break;
		}
	
	return value;
}
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	01 f1       	breq	.+64     	; 0x37a <DIO_init+0x44>
 33a:	30 f0       	brcs	.+12     	; 0x348 <DIO_init+0x12>
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	b1 f1       	breq	.+108    	; 0x3ac <DIO_init+0x76>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	09 f4       	brne	.+2      	; 0x346 <DIO_init+0x10>
 344:	4c c0       	rjmp	.+152    	; 0x3de <DIO_init+0xa8>
 346:	08 95       	ret
 348:	41 30       	cpi	r20, 0x01	; 1
 34a:	59 f4       	brne	.+22     	; 0x362 <DIO_init+0x2c>
 34c:	2a b3       	in	r18, 0x1a	; 26
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_init+0x22>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_init+0x1e>
 35c:	82 2b       	or	r24, r18
 35e:	8a bb       	out	0x1a, r24	; 26
 360:	08 95       	ret
 362:	2a b3       	in	r18, 0x1a	; 26
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_init+0x38>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_init+0x34>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	8a bb       	out	0x1a, r24	; 26
 378:	08 95       	ret
 37a:	41 30       	cpi	r20, 0x01	; 1
 37c:	59 f4       	brne	.+22     	; 0x394 <DIO_init+0x5e>
 37e:	27 b3       	in	r18, 0x17	; 23
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_init+0x54>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_init+0x50>
 38e:	82 2b       	or	r24, r18
 390:	87 bb       	out	0x17, r24	; 23
 392:	08 95       	ret
 394:	27 b3       	in	r18, 0x17	; 23
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_init+0x6a>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_init+0x66>
 3a4:	80 95       	com	r24
 3a6:	82 23       	and	r24, r18
 3a8:	87 bb       	out	0x17, r24	; 23
 3aa:	08 95       	ret
 3ac:	41 30       	cpi	r20, 0x01	; 1
 3ae:	59 f4       	brne	.+22     	; 0x3c6 <DIO_init+0x90>
 3b0:	24 b3       	in	r18, 0x14	; 20
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_init+0x86>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_init+0x82>
 3c0:	82 2b       	or	r24, r18
 3c2:	84 bb       	out	0x14, r24	; 20
 3c4:	08 95       	ret
 3c6:	24 b3       	in	r18, 0x14	; 20
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_init+0x9c>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_init+0x98>
 3d6:	80 95       	com	r24
 3d8:	82 23       	and	r24, r18
 3da:	84 bb       	out	0x14, r24	; 20
 3dc:	08 95       	ret
 3de:	41 30       	cpi	r20, 0x01	; 1
 3e0:	59 f4       	brne	.+22     	; 0x3f8 <DIO_init+0xc2>
 3e2:	21 b3       	in	r18, 0x11	; 17
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_init+0xb8>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_init+0xb4>
 3f2:	82 2b       	or	r24, r18
 3f4:	81 bb       	out	0x11, r24	; 17
 3f6:	08 95       	ret
 3f8:	21 b3       	in	r18, 0x11	; 17
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	80 95       	com	r24
 40a:	82 23       	and	r24, r18
 40c:	81 bb       	out	0x11, r24	; 17
 40e:	08 95       	ret

00000410 <DIO_write>:
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	01 f1       	breq	.+64     	; 0x454 <DIO_write+0x44>
 414:	30 f0       	brcs	.+12     	; 0x422 <DIO_write+0x12>
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	b1 f1       	breq	.+108    	; 0x486 <DIO_write+0x76>
 41a:	83 30       	cpi	r24, 0x03	; 3
 41c:	09 f4       	brne	.+2      	; 0x420 <DIO_write+0x10>
 41e:	4c c0       	rjmp	.+152    	; 0x4b8 <DIO_write+0xa8>
 420:	08 95       	ret
 422:	41 30       	cpi	r20, 0x01	; 1
 424:	59 f4       	brne	.+22     	; 0x43c <DIO_write+0x2c>
 426:	2b b3       	in	r18, 0x1b	; 27
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_write+0x22>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_write+0x1e>
 436:	82 2b       	or	r24, r18
 438:	8b bb       	out	0x1b, r24	; 27
 43a:	08 95       	ret
 43c:	2b b3       	in	r18, 0x1b	; 27
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_write+0x38>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_write+0x34>
 44c:	80 95       	com	r24
 44e:	82 23       	and	r24, r18
 450:	8b bb       	out	0x1b, r24	; 27
 452:	08 95       	ret
 454:	41 30       	cpi	r20, 0x01	; 1
 456:	59 f4       	brne	.+22     	; 0x46e <DIO_write+0x5e>
 458:	28 b3       	in	r18, 0x18	; 24
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_write+0x54>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_write+0x50>
 468:	82 2b       	or	r24, r18
 46a:	88 bb       	out	0x18, r24	; 24
 46c:	08 95       	ret
 46e:	28 b3       	in	r18, 0x18	; 24
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_write+0x6a>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_write+0x66>
 47e:	80 95       	com	r24
 480:	82 23       	and	r24, r18
 482:	88 bb       	out	0x18, r24	; 24
 484:	08 95       	ret
 486:	41 30       	cpi	r20, 0x01	; 1
 488:	59 f4       	brne	.+22     	; 0x4a0 <DIO_write+0x90>
 48a:	25 b3       	in	r18, 0x15	; 21
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_write+0x86>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_write+0x82>
 49a:	82 2b       	or	r24, r18
 49c:	85 bb       	out	0x15, r24	; 21
 49e:	08 95       	ret
 4a0:	25 b3       	in	r18, 0x15	; 21
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_write+0x9c>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_write+0x98>
 4b0:	80 95       	com	r24
 4b2:	82 23       	and	r24, r18
 4b4:	85 bb       	out	0x15, r24	; 21
 4b6:	08 95       	ret
 4b8:	41 30       	cpi	r20, 0x01	; 1
 4ba:	59 f4       	brne	.+22     	; 0x4d2 <DIO_write+0xc2>
 4bc:	22 b3       	in	r18, 0x12	; 18
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_write+0xb8>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_write+0xb4>
 4cc:	82 2b       	or	r24, r18
 4ce:	82 bb       	out	0x12, r24	; 18
 4d0:	08 95       	ret
 4d2:	22 b3       	in	r18, 0x12	; 18
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_write+0xce>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	6a 95       	dec	r22
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_write+0xca>
 4e2:	80 95       	com	r24
 4e4:	82 23       	and	r24, r18
 4e6:	82 bb       	out	0x12, r24	; 18
 4e8:	08 95       	ret

000004ea <DIO_toggle>:

void DIO_toggle(uint8 portNumber, uint8 pinNumber)
{
	switch(portNumber){
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	89 f0       	breq	.+34     	; 0x510 <DIO_toggle+0x26>
 4ee:	28 f0       	brcs	.+10     	; 0x4fa <DIO_toggle+0x10>
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	c9 f0       	breq	.+50     	; 0x526 <DIO_toggle+0x3c>
 4f4:	83 30       	cpi	r24, 0x03	; 3
 4f6:	11 f1       	breq	.+68     	; 0x53c <DIO_toggle+0x52>
 4f8:	08 95       	ret
		case PORT_A:
	 TOGGLE_BIT(PORTA,pinNumber);
 4fa:	2b b3       	in	r18, 0x1b	; 27
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_toggle+0x1c>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_toggle+0x18>
 50a:	82 27       	eor	r24, r18
 50c:	8b bb       	out	0x1b, r24	; 27
		break;
 50e:	08 95       	ret
		case PORT_B:
		TOGGLE_BIT(PORTB,pinNumber);
 510:	28 b3       	in	r18, 0x18	; 24
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_toggle+0x32>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_toggle+0x2e>
 520:	82 27       	eor	r24, r18
 522:	88 bb       	out	0x18, r24	; 24
		break;
 524:	08 95       	ret
		case PORT_C:
		TOGGLE_BIT(PORTC,pinNumber);
 526:	25 b3       	in	r18, 0x15	; 21
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_toggle+0x48>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_toggle+0x44>
 536:	82 27       	eor	r24, r18
 538:	85 bb       	out	0x15, r24	; 21
		break;
 53a:	08 95       	ret
		case PORT_D:
		TOGGLE_BIT(PORTD,pinNumber);
 53c:	22 b3       	in	r18, 0x12	; 18
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_toggle+0x5e>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_toggle+0x5a>
 54c:	82 27       	eor	r24, r18
 54e:	82 bb       	out	0x12, r24	; 18
 550:	08 95       	ret

00000552 <Exi0Init>:
 */ 
#include "int.h"

void Exi0Init()
{
	DDRD  &= (~(1<<PD2));                // Configure INT0/PD2 as input pin
 552:	81 b3       	in	r24, 0x11	; 17
 554:	8b 7f       	andi	r24, 0xFB	; 251
 556:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<PD2);					 //enabling Pull-up for the pin
 558:	82 b3       	in	r24, 0x12	; 18
 55a:	84 60       	ori	r24, 0x04	; 4
 55c:	82 bb       	out	0x12, r24	; 18
	GICR  |= (1<<INT0);                  // Enable external interrupt pin INT0
 55e:	8b b7       	in	r24, 0x3b	; 59
 560:	80 64       	ori	r24, 0x40	; 64
 562:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC01);  				 // Trigger INT0 with the falling edge
 564:	85 b7       	in	r24, 0x35	; 53
 566:	82 60       	ori	r24, 0x02	; 2
 568:	85 bf       	out	0x35, r24	; 53
	GIFR   = (1<<INTF0);				 // Disabling INT0 flag manually to avoid any errors
 56a:	80 e4       	ldi	r24, 0x40	; 64
 56c:	8a bf       	out	0x3a, r24	; 58
 56e:	08 95       	ret

00000570 <Exi0Enable>:
}

// function to enable global interrupt
void Exi0Enable (void)
{
	SET_BIT(SREG,7);
 570:	8f b7       	in	r24, 0x3f	; 63
 572:	80 68       	ori	r24, 0x80	; 128
 574:	8f bf       	out	0x3f, r24	; 63
 576:	08 95       	ret

00000578 <Timer0_Delay>:
 *  Author: RGB
 */ 
#include "timer.h"

void Timer0_Delay(uint32 Time_delay)
{
 578:	0f 93       	push	r16
 57a:	1f 93       	push	r17
 57c:	8b 01       	movw	r16, r22
 57e:	9c 01       	movw	r18, r24
	TCNT0 = 6; //Set Timer0 initial value to 6
 580:	86 e0       	ldi	r24, 0x06	; 6
 582:	82 bf       	out	0x32, r24	; 50
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1*/

	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
 584:	85 e8       	ldi	r24, 0x85	; 133
 586:	83 bf       	out	0x33, r24	; 51

     for(uint32 i=0 ;i< Time_delay ;i++){
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	ba 01       	movw	r22, r20
 58e:	0a c0       	rjmp	.+20     	; 0x5a4 <Timer0_Delay+0x2c>

	   while(!(TIFR & (1<<TOV0))); // Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)
 590:	08 b6       	in	r0, 0x38	; 56
 592:	00 fe       	sbrs	r0, 0
 594:	fd cf       	rjmp	.-6      	; 0x590 <Timer0_Delay+0x18>
	   TIFR |= (1<<TOV0); // Clear TOV0 bit by set its value
 596:	88 b7       	in	r24, 0x38	; 56
 598:	81 60       	ori	r24, 0x01	; 1
 59a:	88 bf       	out	0x38, r24	; 56
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1*/

	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);

     for(uint32 i=0 ;i< Time_delay ;i++){
 59c:	4f 5f       	subi	r20, 0xFF	; 255
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	6f 4f       	sbci	r22, 0xFF	; 255
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	40 17       	cp	r20, r16
 5a6:	51 07       	cpc	r21, r17
 5a8:	62 07       	cpc	r22, r18
 5aa:	73 07       	cpc	r23, r19
 5ac:	88 f3       	brcs	.-30     	; 0x590 <Timer0_Delay+0x18>
	   while(!(TIFR & (1<<TOV0))); // Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)
	   TIFR |= (1<<TOV0); // Clear TOV0 bit by set its value

     }

	TCCR0 = 0; // Stop Timer0 by clear the Clock bits (CS00, CS01 and CS02)
 5ae:	13 be       	out	0x33, r1	; 51
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	08 95       	ret

000005b6 <_exit>:
 5b6:	f8 94       	cli

000005b8 <__stop_program>:
 5b8:	ff cf       	rjmp	.-2      	; 0x5b8 <__stop_program>
